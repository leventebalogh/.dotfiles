[user]
	name = Levente Balogh
	email = balogh.levente.hu@gmail.com

[alias]

	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	st = status
	sts = status -s
	br = branch
	co = checkout
	rbm = rebase -i origin/master
	rba = rebase --abort
	rbc = rebase --continue
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat" # Show the diff between the latest commit and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d" 	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	p = !"git pull; git submodule foreach git pull origin master" # Pull in remote changes for the current repository and all its submodules
	c = clone --recursive # Clone a repository including all submodules
	ca = !git add -A && git commit -asv # Commit all changes
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f" # Switch to a branch, creating it if necessary
	tags = tag -l
	remotes = remote -v
	amend = commit --amend --reuse-message=HEAD # Amend the currently staged files to the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	reb = "!r() { git rebase -i HEAD~$1; }; r" # Interactive rebase with the given number of latest commits
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r" # Remove the old tag with this name and tag the latest commit with it.
	fb = "!f() { git branch -a --contains $1; }; f" # Find branches containing commit
	ft = "!f() { git describe --always --contains $1; }; f" # Find tags containing commit
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f" # Find commits by source code
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f" # Find commits by commit message
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d" # Remove branches that have already been merged with master - a.k.a. ‘delete merged’
	contributors = shortlog --summary --numbered # List contributors with number of commits

	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Use Sublime as default editor
	editor = "subl -w"

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]
	tool = diffmerge
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[mergetool "diffmerge"]
	cmd = diffmerge --merge\n--result=$MERGED $LOCAL $BASE $REMOTE
	trustExitCode = true

[push]
	default = simple
	followTags = true

# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"
